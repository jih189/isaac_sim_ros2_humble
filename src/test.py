import numpy as np

# Define your matrix
A = np.array([
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 1.000000, -0.000000, 0.730685, -0.000000, -1.175480],
    [0.000000, 1.000000, -0.000000, 0.730685, -0.000000, -0.747820],
    [0.000000, 1.000000, -0.000000, 0.730685, -0.000000, -0.960359],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 1.000000, -0.000000, 0.730685, -0.000000, -1.175480],
    [0.000000, 1.000000, -0.000000, 0.730685, -0.000000, -0.747820],
    [0.000000, 1.000000, -0.000000, 0.730685, -0.000000, -0.960359],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 1.000000, -0.000000, 0.995400, -0.000000],
    [0.000000, 1.000000, -0.000000, -0.252420, -0.000000, -0.852870],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 1.000000, -0.000000, 0.929000, -0.000000],
    [0.000000, 1.000000, -0.000000, 0.000000, -0.000000, -0.812000],
    [1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 1.000000, -0.000000, 0.000000, -0.000000, -0.460000],
    [1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 1.000000, -0.000000, 0.000000, -0.000000, -0.138500],
    [1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],   
    ])

error_matrix = np.array([[-0.061650, -0.000000, -0.000010, 0.000000, 0.000000, 0.000000]])

# Calculate the pseudoinverse
A_pinv = np.linalg.pinv(A)

print("Original matrix:")
print(A)
print("\nPseudoinverse of the matrix:")
print(A_pinv.T @ error_matrix.T)

# set the precision
np.set_printoptions(precision=3)

B = np.array([
 [0.000000, 0.000000, 1.000000, -0.000000, 0.929000, -0.000000],
 [0.000000, 1.000000, -0.000000, 0.000000, -0.000000, -0.812000],
 [1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
 [0.000000, 1.000000, -0.000000, 0.000000, -0.000000, -0.460000],
 [1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
 [0.000000, 1.000000, -0.000000, 0.000000, -0.000000, -0.138500,],
 [1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
])
print("Matrix B:")
print(B.T)
print("Pseudoinverse of the matrix B:")
np.set_printoptions(precision=3)
C = np.linalg.pinv(B.T)
print(C)
